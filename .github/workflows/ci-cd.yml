name: CI/CD Pipeline

on:
  push:
    branches: [dev, main]

env:
  WEB_APP_NAME_DEV: ${{ secrets.WEB_APP_NAME_DEV }}
  IMAGE_NAME_BACKEND_DEV: backend-dev
  IMAGE_NAME_BACKEND_MAIN: ${{ secrets.IMAGE_NAME_BACKEND }}
  IMAGE_NAME_FRONTEND: ${{ secrets.IMAGE_NAME_FRONTEND }}
  IMAGE_TAG: latest
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
  ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: pip install ruff
      - name: Run linter
        run: ruff check .

  local_test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main')
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          pip install pytest
          pip install -r requirements.txt
      - name: Run tests
        run: pytest tests/local_tests

  build_and_push_dev:
    runs-on: ubuntu-latest
    needs: local_test
    if: github.ref == 'refs/heads/dev'
    steps:
      - uses: actions/checkout@v2
      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}
      - name: Build and push
        run: |
          docker build -t ${ACR_LOGIN_SERVER}/${IMAGE_NAME_BACKEND_DEV}:${IMAGE_TAG} -f Dockerfile.backend .
          docker push ${ACR_LOGIN_SERVER}/${IMAGE_NAME_BACKEND_DEV}:${IMAGE_TAG}

  build_frontend:
    runs-on: ubuntu-latest
    needs: local_test
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2
      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}
      - name: Build and push
        run: |
          docker build -t ${ACR_LOGIN_SERVER}/${IMAGE_NAME_FRONTEND}:${IMAGE_TAG} -f Dockerfile.frontend .
          docker push ${ACR_LOGIN_SERVER}/${IMAGE_NAME_FRONTEND}:${IMAGE_TAG}

  deployed_test:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          pip install pytest
          pip install -r test/deployed_tests/requirements.txt
      - name: Run tests
        run: pytest tests/deployed_tests

  build_and_push_main:
    runs-on: ubuntu-latest
    needs: deployed_test
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2
      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}
      - name: Build and push
        run: |
          docker build -t ${ACR_LOGIN_SERVER}/${IMAGE_NAME_BACKEND_MAIN}:${IMAGE_TAG} -f Dockerfile.backend .
          docker push ${ACR_LOGIN_SERVER}/${IMAGE_NAME_BACKEND_MAIN}:${IMAGE_TAG}